The keyword constexpr was introduced in C++11 and improved in C++14.
 it means const expression Like const, it can be applied to variables:

constexpr can also be applied to functions and class constructors.
constexpr indicates that the value, or return value, is constant and,
where possible, is computed at compile time.

A literal type is one whose layout can be determined at compile time

Look at a01constexpr.cpp , because documenation will use the words literaltype and trivialtype...
Look at a03literaltype.cpp
Look at a02trivial.cpp



standard layout
In C++, a standard-layout type refers to a class or struct that satisfies certain conditions. 


No Non-Static Data Members That Aren’t Standard-Layout:
 A standard-layout class must not have any non-static data members that aren’t themselves standard-layout.
No Virtual Functions and No Virtual Base Classes:
It should not contain virtual functions or have virtual base classes.
Uniform Access Control: All non-static data members must have the same access control
 (i.e., either all public, all protected, or all private).
No Non-Standard-Layout Base Classes: The class should not have base classes that aren’t standard-layout.
In summary, a standard-layout type is memcopy-able and has a layout defined in such a way that it can be 
consumed by C programs1. If you encounter a type that meets these criteria,
 you’re dealing with a standard-layout class or struct in C++


consider below points 
Use constexpr:

For compile-time constants and constant expressions.
To optimize performance by moving computations to compile time.
In template metaprogramming for compile-time checks and computations.
For constant initialization of static data members.
Avoid constexpr:

For runtime-dependent computations.
For complex or time-consuming compile-time computations.
For objects requiring mutable state.
For types that do not meet the literal type requirements.


   

